atm I'm deciding how I'll represent the graph 

adj list but not a fancy clever one like I did in walking on graphs cuz 
I might want to remove nodes / links at some point down the line 

edgerunner aims to be a simple cli game where you escape a labyrinth while being pursued
by an evil ennemy. Very similar to the the OG BSD rogue in that sense.

the "labyrinth" is actually a random planar graph generated with delaunay triangulation.
the project is very early atm. the "frontend" of the game will be handled with ncurses


structure of the program : 

main : parse arguments (game mode and all)

game : start the level 
    -> lvl_start()
        -> gen_graph : generates the level
        -> turn : play while level not over 
            -> parses movement / quit -> makes a move 
            -> IA makes a move 


roadmap : 

- I think I should begin with implementing the map generation 

- Then either move on to printing the map (using ncurses)
- or making the player to move

- ennemy IA will be the last (very basic at first and then I might implement fancier stuff)

-> to make the game cool I think the player should see the ennemy but not it's position 

-> when reaching higher lever, the graph could get bigger / more ennemies could be added 

-> maybe add a screensaver version (cool visuals :O )

todo : 

-> check adj lists functions ; done 
-> implement basic graph manipulation ; done 

-> implement the graph generation algorithm (might be a lot of work )

-> implement the basic game system with ncurses 
    -> printing graph 
    -> level changing 
    -> movement of p1 
    -> score calculation 
    -> ennemy movement 
-> implement the ennemy AI 

-> misc stuff
  -> score saving 
  -> build script
  -> fancier AI 
  -> fancier map generation
  -> 2 players mode 
  -> AI vs AI mode 
  -> screensaver mode 
  -> documentation 